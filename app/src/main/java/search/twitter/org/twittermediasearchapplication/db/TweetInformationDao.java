package search.twitter.org.twittermediasearchapplication.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import search.twitter.org.twittermediasearchapplication.db.TweetInformation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TWEET_INFORMATION".
*/
public class TweetInformationDao extends AbstractDao<TweetInformation, Void> {

    public static final String TABLENAME = "TWEET_INFORMATION";

    /**
     * Properties of entity TweetInformation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ImgUrl = new Property(0, String.class, "imgUrl", false, "IMG_URL");
        public final static Property ImgDesc = new Property(1, String.class, "imgDesc", false, "IMG_DESC");
        public final static Property ImgProfileUrl = new Property(2, String.class, "imgProfileUrl", false, "IMG_PROFILE_URL");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property ScreenName = new Property(4, String.class, "screenName", false, "SCREEN_NAME");
        public final static Property ProfileUrl = new Property(5, String.class, "profileUrl", false, "PROFILE_URL");
        public final static Property TweetUrl = new Property(6, String.class, "tweetUrl", false, "TWEET_URL");
    };


    public TweetInformationDao(DaoConfig config) {
        super(config);
    }
    
    public TweetInformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TWEET_INFORMATION\" (" + //
                "\"IMG_URL\" TEXT," + // 0: imgUrl
                "\"IMG_DESC\" TEXT," + // 1: imgDesc
                "\"IMG_PROFILE_URL\" TEXT," + // 2: imgProfileUrl
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"SCREEN_NAME\" TEXT," + // 4: screenName
                "\"PROFILE_URL\" TEXT," + // 5: profileUrl
                "\"TWEET_URL\" TEXT);"); // 6: tweetUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TWEET_INFORMATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TweetInformation entity) {
        stmt.clearBindings();
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(1, imgUrl);
        }
 
        String imgDesc = entity.getImgDesc();
        if (imgDesc != null) {
            stmt.bindString(2, imgDesc);
        }
 
        String imgProfileUrl = entity.getImgProfileUrl();
        if (imgProfileUrl != null) {
            stmt.bindString(3, imgProfileUrl);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String screenName = entity.getScreenName();
        if (screenName != null) {
            stmt.bindString(5, screenName);
        }
 
        String profileUrl = entity.getProfileUrl();
        if (profileUrl != null) {
            stmt.bindString(6, profileUrl);
        }
 
        String tweetUrl = entity.getTweetUrl();
        if (tweetUrl != null) {
            stmt.bindString(7, tweetUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public TweetInformation readEntity(Cursor cursor, int offset) {
        TweetInformation entity = new TweetInformation( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // imgUrl
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgDesc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imgProfileUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // screenName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // profileUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // tweetUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TweetInformation entity, int offset) {
        entity.setImgUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImgDesc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImgProfileUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScreenName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProfileUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTweetUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(TweetInformation entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(TweetInformation entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
